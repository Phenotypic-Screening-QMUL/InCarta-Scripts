source("D:/Ryan/SAMP/SAMP Clean Run/OIS Induction - Test/Import Data.R", echo=TRUE)
source("D:/Ryan/SAMP/SAMP Clean Run/OIS Induction - Test/Import Data.R", echo=TRUE)
#Remove Single Target Only and Non-Numeric
drop_cols <- c(1:4,6:10,11:14,29:31,34,51:54,75:77,80,89:92)
#Import Summary Data
Ind1_ST <- fread("OIS_Ind_1_ST.csv", drop = drop_cols,stringsAsFactors = F)
Ind2_ST <- fread("OIS_Ind_2_ST.csv", drop = drop_cols,stringsAsFactors = F)
Ind3_ST <- fread("OIS_Ind_3_ST.csv", drop = drop_cols,stringsAsFactors = F)
Vector_Ind_ST1 <- Ind1_ST %>%
filter(`WELL LABEL` %in% c("B - 2","B - 3","B - 4"))
Vector_Ind_ST2 <- Ind2_ST %>%
filter(`WELL LABEL` %in% c("B - 2","B - 3","B - 4"))
Vector_Ind_ST3 <- Ind3_ST %>%
filter(`WELL LABEL` %in% c("B - 2","B - 3","B - 4"))
OIS_Ind_ST1 <- Ind1_ST %>%
filter(`WELL LABEL` %in% c("B - 7","B - 8","B - 9"))
OIS_Ind_ST2 <- Ind2_ST %>%
filter(`WELL LABEL` %in% c("B - 7","B - 8","B - 9"))
OIS_Ind_ST3 <- Ind3_ST %>%
filter(`WELL LABEL` %in% c("B - 7","B - 8","B - 9"))
library("plyr")
library("dplyr")
library("data.table")
library("stringr")
#Remove Single Target Only and Non-Numeric
drop_cols <- c(1:4,6:10,11:14,29:31,34,51:54,75:77,80,89:92)
#Import Summary Data
Ind1_ST <- fread("OIS_Ind_1_ST.csv", drop = drop_cols,stringsAsFactors = F)
Ind2_ST <- fread("OIS_Ind_2_ST.csv", drop = drop_cols,stringsAsFactors = F)
Ind3_ST <- fread("OIS_Ind_3_ST.csv", drop = drop_cols,stringsAsFactors = F)
Vector_Ind_ST1 <- Ind1_ST %>%
filter(`WELL LABEL` %in% c("B - 2","B - 3","B - 4"))
Vector_Ind_ST2 <- Ind2_ST %>%
filter(`WELL LABEL` %in% c("B - 2","B - 3","B - 4"))
Vector_Ind_ST3 <- Ind3_ST %>%
filter(`WELL LABEL` %in% c("B - 2","B - 3","B - 4"))
OIS_Ind_ST1 <- Ind1_ST %>%
filter(`WELL LABEL` %in% c("B - 7","B - 8","B - 9"))
OIS_Ind_ST2 <- Ind2_ST %>%
filter(`WELL LABEL` %in% c("B - 7","B - 8","B - 9"))
OIS_Ind_ST3 <- Ind3_ST %>%
filter(`WELL LABEL` %in% c("B - 7","B - 8","B - 9"))
1+1
1+1
The code is here
setwd("C:/Users/hmy922/OneDrive - Queen Mary, University of London/Phenotypic Screening Facility/Code Repository/Github Repositories/InCarta-Scripts/InCarta General Use")
library("RColorBrewer") # Color palettes
library("matrixStats")  # Efficient matrix computations
library("plyr")        # Data manipulation
library("dplyr")       # Data manipulation
library("data.table")  # High-performance data manipulation
library("stringr")     # String manipulation
library("ggplot2")     # Elegant plots
library("Rtsne")       # Dimensionality reduction
library("readxl")      # Read Excel files
# Import CSV File
Data <- fread("Summary Data.csv") # Fast CSV reading using fread function  - update with your file name
# List the variables you want to keep - make sure wavelength is correct!
Variable_Names <- c("Row", "Column", "Nuclei Nuclei Count wv1", "Nuclei Area wv1", "Cells Area wv2")
# Use your variables list to select the columns
Data_Tidy <- Data %>%
select(all_of(Variable_Names))
# Add some meaningful labels based on columns - here DMSO are in columns 1-6 and Palbociclib in columns 7-12
Data_Labelled <- Data_Tidy %>%
mutate(Treatment = case_when(Column == 1:6 ~ "DMSO",
Column == 7:12 ~ "Palbo"))
# Add some meaningful labels based on columns - here DMSO are in columns 1-6 and Palbociclib in columns 7-12
Data_Labelled <- Data_Labelled %>%
mutate(Cells = case_when(Row %in% c("A","B","C","D") ~ "MB231",
Row %in% c("E","F","G","H") ~ "SKMEL"))
View(Data)
#Filter and Split Data As Needed
Data_MB231 <- Data_Labelled %>%
filter(Cells == "MB231")
Data_SKMEL <- Data_Labelled %>%
filter(Cells == "SKMEL")
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
# Make a Nuclear Count Plot - MB231
ggplot(Data_MB231, aes(x = Row, y = `Nuclei Nuclei Count wv1`, fill = Treatment)) +
geom_bar(stat = "summary", fun = "mean", position = "dodge", alpha = 0.8) +
geom_point(position = position_dodge(width = .9), color = "black") +
theme_bw() +
scale_fill_manual(values = c("#999999", "red")) +
labs(title = "Nuclear Count - MB231 - Rows", x = "Row", y = "Nuclei Count") +
guides(fill = guide_legend()) +
scale_x_continuous(breaks = seq(min(Data_MB231$Row), max(Data_MB231$Row), by = 1))
# Save the plot
ggsave("Nuclear Count Plot MB231 - Rows.png", plot = last_plot(), width = 6, height = 4, dpi = 300)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
install.packages("platetools")
source("~/.active-rstudio-document", echo=TRUE)
# Generate heatmap using platetools
raw_map(data = Data$`Nuclei Nuclei Count wv1`,
well = Data$`NEW WELL LABEL`,
plate = 96)
# Generate heatmap using platetools
raw_map(data = Data$`Nuclei Nuclei Count wv1`,
well = Data$`NEW WELL LABEL`,
plate = 96)
source("~/.active-rstudio-document", echo=TRUE)
source("C:/Users/hmy922/OneDrive - Queen Mary, University of London/Phenotypic Screening Facility/Code Repository/Github Repositories/InCarta-Scripts/InCarta General Use/InCarta_Plate_Quality_Control.R", echo=TRUE)
#Update Data frame for heatmap
Data <- Data_Labelled %>%
mutate(
`NEW WELL LABEL` = str_c(Row, str_pad(Column, 2, pad = "0"))  # Combine Row and zero-padded Column
)
source("C:/Users/hmy922/OneDrive - Queen Mary, University of London/Phenotypic Screening Facility/Code Repository/Github Repositories/InCarta-Scripts/InCarta General Use/InCarta_Plate_Quality_Control.R", echo=TRUE)
